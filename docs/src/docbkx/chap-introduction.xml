<?xml version="1.0" encoding="utf-8"?>

  <chapter xmlns="http://docbook.org/ns/docbook"
           xmlns:xlink="http://www.w3.org/1999/xlink">

    <title>Introduction</title>

    <para>Sensei is an open-source, real-time, full-text searchable
    distributed database that is designed to handle the following type
    of queries:</para>

    <programlisting>    SELECT f1,f2...fn FROM members
    WHERE c1 AND c2 AND c3..
    MATCH (fulltext query, e.g. "java engineer")
    GROUP BY fx,fy,fz...
    ORDER BY fa,fb...
    LIMIT offset,count</programlisting>

    <para>Sensei is written in Java and is built on top of several other
    open-source software systems (see <xref
    linkend="sensei-foundation"></xref>):</para>

    <itemizedlist spacing="compact">
        <listitem>
          <para>Bobo <indexterm><primary>Bobo</primary></indexterm>
          (<link
          xlink:href="http://sna-projects.com/bobo/">http://sna-projects.com/bobo/</link>):
          a faceted search implementation written in Java, using Lucene
          as the underlying search and indexing engine.
          </para>
        </listitem>
        <listitem>
          <para>Zoie <indexterm><primary>Zoie</primary></indexterm>(<link
          xlink:href="http://sna-projects.com/zoie/">http://sna-projects.com/zoie/</link>):
          a real-time search and indexing system built on Lucene.
          </para>
        </listitem>
        <listitem>
          <para>Lucene
          <indexterm><primary>Lucene</primary><secondary>Apach
          Lucene</secondary></indexterm>(<link
          xlink:href="http://lucene.apache.org/">http://lucene.apache.org/</link>):
          a high-performance, full-featured text search engine library
          written entirely in Java. </para>
        </listitem>
        <listitem>
          <para>Norbert
          <indexterm><primary>Norbert</primary></indexterm>(<link
          xlink:href="http://sna-projects.com/norbert/">http://sna-projects.com/norbert/</link>):
          a library that provides easy cluster management and workload
          distribution.  Norbert is built on ZooKeeper
          <indexterm><primary>ZooKeeper</primary></indexterm> (<link
          xlink:href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</link>)
          and Netty <indexterm><primary>Netty</primary></indexterm>
          (<link
          xlink:href="http://www.jboss.org/netty">http://www.jboss.org/netty</link>)
          </para>
        </listitem>
    </itemizedlist>

    <figure xml:id="sensei-foundation">
      <title>Sensei and Its Foundation</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata align="center" fileref="figures/sensei-stack.svg"
                     format="SVG" scale="100" valign="middle" />
        </imageobject>

        <imageobject role="html">
          <imagedata align="center" fileref="figures/sensei-stack.png"
                     format="PNG" scale="100" valign="middle" />
        </imageobject>
      </mediaobject>
    </figure>


    <section>
      <title>Design Considerations</title>

      <para>As another NoSQL<indexterm> <primary>NoSQL</primary>
      </indexterm> system (http://nosql-database.org/), Sensei
      is designed and built with the following considerations:</para>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Data</emphasis>
          </para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Fault tolerance - when one replication is down, data is
              still accessible</para>
            </listitem>

            <listitem>
              <para>Durability - N copies of data is stored</para>
            </listitem>

            <listitem>
              <para>Through-put - Parallelizable request-handling on different
              nodes/data replicas, designed to handle internet traffic</para>
            </listitem>

            <listitem>
              <para>Consistency - Eventally consistent</para>
            </listitem>

            <listitem>
              <para>Data recovery - each shared/replica is noted with a
              watermark for data recovery</para>
            </listitem>

            <listitem>
              <para>Large dataset - designed to handle 100s millions -
              billions of rows</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Horizontally Scalable</emphasis></para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Data is partitioned - so work-load is also
              distributed</para>
            </listitem>

            <listitem>
              <para>Elasticity - Nodes can be added to accomodate data
              growth</para>
            </listitem>

            <listitem>
              <para>Online expansion - Cluster can grow while handling online
              requests</para>
            </listitem>

            <listitem>
              <para>Online cluster management - Cluster topology can change
              while handling online requests</para>
            </listitem>

            <listitem>
              <para>Low operational/maintenance costs - Push it, leave it and
              forget it.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Performance</emphasis>
          </para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Low indexing latency - real-time update</para>
            </listitem>

            <listitem>
              <para>Low search latency - millisecond query response
              time</para>
            </listitem>

            <listitem>
              <para>Low volatility - low variance in both indexing and search
              latency</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Customizability</emphasis>
          </para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Plug-in framework - custom query handling logic</para>
            </listitem>

            <listitem>
              <para>Routing factory - custom routing logic, default:
              round-robin</para>
            </listitem>

            <listitem>
              <para>Index sharding strategy <indexterm>
              <primary>sharding strategy</primary>
              </indexterm> - different sharding strategy for
              different applications, e.g. time, mod etc.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Comparing to Traditional RDBMS</title>

      <para><emphasis role="bold">RDBMS</emphasis>:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Vertically scaled</para>
        </listitem>

        <listitem>
          <para>Strong ACID guarantee</para>
        </listitem>

        <listitem>
          <para>Relational support</para>
        </listitem>

        <listitem>
          <para>Performance cost with full-text integration</para>
        </listitem>

        <listitem>
          <para>High query latency with large dataset, esp. Group By</para>
        </listitem>

        <listitem>
          <para>Indexes needs to be built for all sort possibilities
          offline</para>
        </listitem>
      </itemizedlist>

      <para><emphasis role="bold">Sensei</emphasis>:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Horizontally scaled</para>
        </listitem>

        <listitem>
          <para>Relaxed Consistency with high durability guarantees</para>
        </listitem>

        <listitem>
          <para>Data is streamed in, so Atomicity and Isolation is to be
          handled by the data producer</para>
        </listitem>

        <listitem>
          <para>Full-text search support</para>
        </listitem>

        <listitem>
          <para>Low query latency with arbitrarily large dataset</para>
        </listitem>

        <listitem>
          <para>Dynamic sorting, index is already built for all sortable
          fields and their combinations</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Architecture</title>

      <para>At a high level, a Sensei system consists of two parts: a
      cluster of Sensei <emphasis>servers</emphasis>
      <indexterm><primary>Sensei server</primary></indexterm>
      (a.k.a. <emphasis>search nodes</emphasis>) and a cluster of Sensei
      <emphasis>brokers</emphasis><indexterm><primary>Sensei
      broker</primary></indexterm>.</para>

      <orderedlist>
        <listitem>
          <para>The cluster of Sensei servers</para>

          <para>Each server covers one or more
          <emphasis>partitions</emphasis> (or
          <emphasis>shards</emphasis> <indexterm>
          <primary>partition</primary><secondary>shard</secondary>
          </indexterm>) of the entire index space, and is
          responsible for real-time indexing and searching on the
          partition(s) belonging to the node.</para>

          <sidebar>
            <title>Partition and Shard</title>
            <para>A partition or shard is just a slice of the index
            served by the entire Sense cluster.  Each partition may have
            multiple replicas handled by different Sensei search nodes.
            How data is partitioned (or sharded) is up to the business
            logic of the application, and the sharding strategy can be
            passed to Sensei as a plug-in.</para>
          </sidebar>

        </listitem>
        <listitem>
          <para>The cluster of Sensei brokers</para>

          <para>Brokers receive search requests from clients, pass them
          to selected servers in the Sensei search cluster, and then
          merge/return search results back to the clients.</para>
        </listitem>
      </orderedlist>

      <para>Sensei brokers are relatively simple and lightweight.  Most
      of the work is done at Sensei servers.  A Sensei server plays two
      roles: indexer and searcher, both of which are implemented by Zoie
      and Bobo embedded in the node.</para>

      <para>Conceptually, a Sensei node consists of the following four
      components:</para>

      <orderedlist>
        <listitem>
          <para>Data Gateway<indexterm><primary>Data Gateway</primary><secondary>Gateway</secondary></indexterm></para>

          <para>This is also simply called <emphasis>gateway</emphasis>,
          which is the component responsible for getting data from
          external sources and passing them to the indexer after an
          optional conversion.  The input data to the gateway
          can be in different formats, while the output of the gateway
          has to be in the format acceptable by Zoie's streaming data
          provider.  (By default, JSON is the format used by Sensei to
          communicate with Zoie.)  The output data from the gateway also
          needs to match the table schema definition.</para>

          <para>Several types of built-in gateway are available in
          Sensei.  They can be used to get data from common data sources
          including:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Line-based text file containing JSON objects.</para>
            </listitem>
            <listitem>
              <para>Kafka (<link
              xlink:href="http://sna-projects.com/kafka/">http://sna-projects.com/kafka/</link>)</para>
            </listitem>
            <listitem>
              <para>JMS</para>
            </listitem>
            <listitem>
              <para>JDBC</para>
            </listitem>
          </itemizedlist>
          
          <para>For each built-in data gateway, a filter can be plugged
          in to convert the original source data into the format defined
          by the table schema.  (See <xref
          linkend="sensei-gateway"></xref>.)</para>

          <figure xml:id="sensei-gateway">
            <title>Sensei Data Gateway</title>

            <mediaobject>
              <imageobject role="fo">
                <imagedata align="center" fileref="figures/sensei-gateway.svg"
                           format="SVG" scale="75" valign="middle" />
              </imageobject>

              <imageobject role="html">
                <imagedata align="center" fileref="figures/sensei-gateway.png"
                           format="PNG" scale="100" valign="middle" />
              </imageobject>
            </mediaobject>
          </figure>

        </listitem>

        <listitem>
          <para>Indexing Manager<indexterm><primary>Indexing Manager</primary></indexterm></para>

          <para>Indexing manager acts as the bridge between the gateway
          and the Zoie system.  It is responsible for passing data from
          the gateway to Zoie, controlling the pace of data consumption,
          and maintaining the index versions on the Sensei node.</para>
        </listitem>

        <listitem>
          <para>Zoie System<indexterm><primary>Zoie System</primary></indexterm></para>

          <para>This is the underlying system powering real-time
          indexing and search.  Two types of Zoie systems are supported
          by Sensei today: regular Zoie and Hourglass.</para>

          <para>Hourglass (<link
          xlink:href="http://linkedin.jira.com/wiki/display/ZOIE/HourGlass+-+Forward-Rolling+Indexing">http://linkedin.jira.com/wiki/display/ZOIE/HourGlass+-+Forward-Rolling+Indexing</link>)
          <indexterm><primary>Hourglass</primary></indexterm>is a
          forward-rolling, append-only indexing system based on Zoie.
          It is used to power LinkedIn Signal <indexterm>
          <primary>Signal</primary></indexterm> (<link
          xlink:href="http://www.linkedin.com/signal">http://www.linkedin.com/signal</link>).</para>

        </listitem>
        <listitem>
          <para>Facet Handlers<indexterm><primary>Facet Handler</primary></indexterm></para>

          <para>Facet handlers are a key component in a Sensei server.
          They are the way we do faceted searches with Bobo.  Without
          facet handlers, none of the column-based queries can be
          done in Sensei.</para>
        </listitem>
      </orderedlist>

    </section>

    <section>
      <title>Architectural Diagram</title>

      <figure>
        <title>Sensei Architectural
        Diagram<indexterm><primary>architectural diagram</primary></indexterm></title>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" fileref="figures/sensei-architect.svg"
                       format="SVG" scale="75" valign="middle" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center" fileref="figures/sensei-architect.png"
                       format="PNG" scale="100" valign="middle" />
          </imageobject>
        </mediaobject>
      </figure>

    </section>
  </chapter>
